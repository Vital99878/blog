[{"W:\\blog\\src\\index.js":"1","W:\\blog\\src\\redux\\reducer.js":"2","W:\\blog\\src\\components\\App\\index.js":"3","W:\\blog\\src\\components\\App\\App.js":"4","W:\\blog\\src\\components\\PostList\\PostList.js":"5","W:\\blog\\src\\components\\EditProfile\\EditProfile.js":"6","W:\\blog\\src\\components\\Header\\index.js":"7","W:\\blog\\src\\components\\SignUp\\index.js":"8","W:\\blog\\src\\components\\SignIn\\index.js":"9","W:\\blog\\src\\components\\CreateArticle\\index.js":"10","W:\\blog\\src\\components\\Article\\index.js":"11","W:\\blog\\src\\redux\\actions.js":"12","W:\\blog\\src\\components\\SignUp\\SignUp.js":"13","W:\\blog\\src\\components\\CreateArticle\\CreateArticle.js":"14","W:\\blog\\src\\components\\SignIn\\SignIn.js":"15","W:\\blog\\src\\components\\Header\\Header.js":"16","W:\\blog\\src\\components\\Article\\Article.js":"17","W:\\blog\\src\\components\\Post\\index.js":"18","W:\\blog\\src\\api\\blog_api.js":"19","W:\\blog\\src\\api\\auth_api.js":"20","W:\\blog\\src\\components\\Post\\Post.js":"21","W:\\blog\\src\\components\\Auth_hoc\\Auth_hoc.js":"22","W:\\blog\\src\\components\\Writer\\index.js":"23","W:\\blog\\src\\components\\User\\index.js":"24","W:\\blog\\src\\components\\User\\User.js":"25","W:\\blog\\src\\components\\Writer\\Writer.js":"26"},{"size":925,"mtime":1614585316291,"results":"27","hashOfConfig":"28"},{"size":2357,"mtime":1615446857526,"results":"29","hashOfConfig":"28"},{"size":49,"mtime":1614580139656,"results":"30","hashOfConfig":"28"},{"size":935,"mtime":1615448051538,"results":"31","hashOfConfig":"28"},{"size":2010,"mtime":1615395251295,"results":"32","hashOfConfig":"28"},{"size":3763,"mtime":1615472486217,"results":"33","hashOfConfig":"28"},{"size":58,"mtime":1614580139662,"results":"34","hashOfConfig":"28"},{"size":58,"mtime":1614755930935,"results":"35","hashOfConfig":"28"},{"size":54,"mtime":1614594454389,"results":"36","hashOfConfig":"28"},{"size":79,"mtime":1615196951393,"results":"37","hashOfConfig":"28"},{"size":55,"mtime":1614868717524,"results":"38","hashOfConfig":"28"},{"size":2904,"mtime":1615525949334,"results":"39","hashOfConfig":"28"},{"size":5418,"mtime":1615467517522,"results":"40","hashOfConfig":"28"},{"size":3876,"mtime":1615526388715,"results":"41","hashOfConfig":"28"},{"size":3086,"mtime":1615477883998,"results":"42","hashOfConfig":"28"},{"size":759,"mtime":1615012792944,"results":"43","hashOfConfig":"28"},{"size":2940,"mtime":1615292404373,"results":"44","hashOfConfig":"28"},{"size":52,"mtime":1614583597470,"results":"45","hashOfConfig":"28"},{"size":3220,"mtime":1615526308093,"results":"46","hashOfConfig":"28"},{"size":2452,"mtime":1615468221815,"results":"47","hashOfConfig":"28"},{"size":2223,"mtime":1615438263085,"results":"48","hashOfConfig":"28"},{"size":1457,"mtime":1615436498632,"results":"49","hashOfConfig":"28"},{"size":58,"mtime":1614697958594,"results":"50","hashOfConfig":"28"},{"size":52,"mtime":1614757765007,"results":"51","hashOfConfig":"28"},{"size":648,"mtime":1615442703413,"results":"52","hashOfConfig":"28"},{"size":953,"mtime":1614915646135,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"utkxfk",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"W:\\blog\\src\\index.js",[],["110","111","112","113","114"],"W:\\blog\\src\\redux\\reducer.js",[],"W:\\blog\\src\\components\\App\\index.js",[],"W:\\blog\\src\\components\\App\\App.js",[],"W:\\blog\\src\\components\\PostList\\PostList.js",[],"W:\\blog\\src\\components\\EditProfile\\EditProfile.js",[],"W:\\blog\\src\\components\\Header\\index.js",[],"W:\\blog\\src\\components\\SignUp\\index.js",[],"W:\\blog\\src\\components\\SignIn\\index.js",[],"W:\\blog\\src\\components\\CreateArticle\\index.js",[],"W:\\blog\\src\\components\\Article\\index.js",[],"W:\\blog\\src\\redux\\actions.js",["115"],"import articles_service from '../api/blog_api';\r\nimport auth_api         from '../api/auth_api';\r\n\r\n// async actions auth\r\nexport function signIn( mail, password ) {\r\n  return async ( dispatch ) => {\r\n    const user = await auth_api.get_user( mail, password );\r\n    if ( typeof user !== 'string' ) {\r\n      dispatch( { type: 'SIGN_IN', user, message: '' } );\r\n    }\r\n    if ( typeof user === 'string' ) {\r\n      dispatch( { type: 'NO_EMAIL_ORE_PASSWORD', message: 'email ore password wrong' } );\r\n    }\r\n  };\r\n};\r\n\r\nexport function signUp( newUser ) {\r\n  return async ( dispatch ) => {\r\n    const user = await auth_api.create_user( newUser );\r\n    if ( user.user) {\r\n      dispatch( { type: 'SIGN_UP', user: user.user} );\r\n    }\r\n    if ( user.errors) {\r\n      const {email: emailValid, username: usernameValid} = user.errors;\r\n      dispatch( { type: 'SIGN_UP_ERRORS', emailValid, usernameValid  } );\r\n    }\r\n  };\r\n};\r\n\r\nexport function updateUser( newUser, token ) {\r\n  return async ( dispatch ) => {\r\n    const user = await auth_api.update_user( newUser, token );\r\n    console.log(user)\r\n    if ( user.user) {\r\n      dispatch( { type: 'SIGN_UP', user: user.user} );\r\n    }\r\n    if ( user.errors) {\r\n      const {email: emailValid, username: usernameValid} = user.errors;\r\n      dispatch( { type: 'SIGN_UP_ERRORS', emailValid, usernameValid  } );\r\n    }\r\n  };\r\n};\r\n\r\nexport function getArticles( offset, token = '' ) {\r\n  return async ( dispatch ) => {\r\n    const { articles, articlesCount } = await articles_service.get_articles( offset, token );\r\n    dispatch( { type: 'GET_ARTICLES', articles, articlesCount } );\r\n  };\r\n}\r\n\r\nexport function postArticle(  article, token) {\r\n  return async ( dispatch ) => {\r\n    await articles_service.post_article( article, token );\r\n    dispatch( { type: 'POST_ARTICLE'} );\r\n  };\r\n}\r\n\r\nexport const isLogOut = () => (\r\n  {\r\n    type: 'LOGOUT',\r\n  });\r\n\r\n// async actions Articles\r\n\r\nexport function getOneArticle( slug, user ) {\r\n  return async ( dispatch ) => {\r\n    const article = await articles_service.get_one_article( slug, user );\r\n    dispatch( { type: 'ONE_ARTICLE', article } );\r\n  };\r\n}\r\n\r\nexport function addToFavorite( slug, token ) {\r\n  return async ( dispatch ) => {\r\n    const article = await articles_service.add_to_favorite( slug, token );\r\n    dispatch( { type: 'LIKE', article } );\r\n  };\r\n}\r\n\r\nexport function removeFromFavorite( slug, token ) {\r\n  return async ( dispatch ) => {\r\n    const article = await articles_service.remove_from_favorite( slug, token );\r\n    dispatch( { type: 'DISLIKE', article } );\r\n  };\r\n}\r\n\r\n// export function removeFromFavorite( slug, token ) {\r\n//   return async ( dispatch ) => {\r\n//     await articles_service.remove_from_favorite( slug, token );\r\n//     dispatch( { type: 'DISLIKE' } );\r\n//   };\r\n// }\r\n\r\nexport const set_offset = ( page, offset ) => (\r\n  {\r\n    type: 'OFFSET',\r\n    offset, page,\r\n  });\r\n\r\n\r\n","W:\\blog\\src\\components\\SignUp\\SignUp.js",[],"W:\\blog\\src\\components\\CreateArticle\\CreateArticle.js",[],"W:\\blog\\src\\components\\SignIn\\SignIn.js",[],"W:\\blog\\src\\components\\Header\\Header.js",[],"W:\\blog\\src\\components\\Article\\Article.js",[],"W:\\blog\\src\\components\\Post\\index.js",[],"W:\\blog\\src\\api\\blog_api.js",["116","117","118","119"],"const base = 'https://conduit.productionready.io/api/articles';\r\n\r\nclass Articles_Service {\r\n  async get_articles( offset, user ) {\r\n    if ( user ) {\r\n      const myHeaders = new Headers();\r\n      myHeaders.append( 'Authorization', `Token ${user.token}` );\r\n      const requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n      };\r\n      const response = await fetch( `${base}?tag=React&limit=5&offset=${offset}`, requestOptions );\r\n      if ( !response.ok ) {\r\n        throw new Error( `Not working fetch ${base}/search/movie: ${response.status}` );\r\n      }\r\n      return response.json();\r\n    }\r\n\r\n    const response = await fetch( `${base}?tag=React&limit=5&offset=${offset}` );\r\n    if ( !response.ok ) {\r\n      throw new Error( `Not working fetch ${base}/search/movie: ${response.status}` );\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async post_article( article, token ) {\r\n    const {title, description, body: content, tagList} = article;\r\n    const myHeaders = new Headers();\r\n    myHeaders.append( 'Authorization', `Token ${token}` );\r\n    const raw = JSON.stringify( {\r\n                                  article: {\r\n                                    title,\r\n                                    description,\r\n                                    body: content,\r\n                                    tagList\r\n                                  },\r\n                                } );\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: myHeaders,\r\n      body: raw\r\n    };\r\n    const response = await fetch( base, requestOptions );\r\n    const body = await response.json();\r\n    return body.article;\r\n  }\r\n\r\n  async get_one_article( slug, user ) {\r\n    if ( user ) {\r\n      const myHeaders = new Headers();\r\n      myHeaders.append( 'Authorization', `Token ${user.token}` );\r\n      const requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n      };\r\n      const response = await fetch( `${base}/${slug}`, requestOptions );\r\n      if ( !response.ok ) {\r\n        throw new Error( `Not working fetch ${base}/search/movie: ${response.status}` );\r\n      }\r\n      const body = await response.json();\r\n      return body.article;\r\n    }\r\n\r\n    const response = await fetch( `${base}/${slug}` );\r\n    if ( !response.ok ) {\r\n      throw new Error( `Error` );\r\n    }\r\n    const body = await response.json();\r\n    return body.article;\r\n  }\r\n\r\n  async add_to_favorite( slug, token ) {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append( 'Authorization', `Token ${token}` );\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: myHeaders,\r\n    };\r\n    const response = await fetch( `${base}/${slug}/favorite`, requestOptions );\r\n    const body = await response.json();\r\n    return body.article;\r\n  }\r\n\r\n  async remove_from_favorite( slug, token ) {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append( 'Authorization', `Token ${token}` );\r\n    const requestOptions = {\r\n      method: 'DELETE',\r\n      headers: myHeaders,\r\n    };\r\n    const response = await fetch( `${base}/${slug}/favorite`, requestOptions );\r\n    const body = await response.json();\r\n    return body.article;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default new Articles_Service();\r\n","W:\\blog\\src\\api\\auth_api.js",["120"],"const base = 'https://conduit.productionready.io/api';\n\n\nclass Auth_api {\n\n  async create_user( { username, email, password }) {\n    const myHeaders = new Headers();\n    myHeaders.append( 'Content-Type', 'application/json' );\n    const raw = JSON.stringify( {\n                                  user: {\n                                    username,\n                                    email,\n                                    password,\n                                  },\n                                } );\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n    const body = await fetch(`${base}/users`, requestOptions);\n    const user = await body.json()\n    console.log(user)\n    return user;\n  }\n\n  async update_user( { username, email, password, avatar }, token) {\n    const myHeaders = new Headers();\n    myHeaders.append( 'Authorization', `Token ${token}` );\n    myHeaders.append( 'Content-Type', 'application/json' );\n    if (!password ) {\n      password = null\n    }\n    const raw = JSON.stringify( {\n                                  user: {\n                                    email,\n                                    username,\n                                    password,\n                                    image:avatar\n                                  },\n                                } );\n    const requestOptions = {\n      method: 'PUT',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n    const body = await fetch(`${base}/user`, requestOptions);\n    const user = await body.json()\n    return user;\n  }\n\n  async get_user(email, password) {\n    const myHeaders = new Headers();\n    myHeaders.append( 'Content-Type', 'application/json' );\n    const raw = JSON.stringify( {\n                                  user: {\n                                    email,\n                                    password,\n                                  },\n                                } );\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    };\n    const body = await fetch(`${base}/users/login`, requestOptions);\n    if ( body.status === 422) {\n      return 'email ore password wrong'\n    }\n    const user = await body.json()\n    return user.user;\n  }\n\n  // async create_article() {\n  // }\n  //\n  // async edit_article() {\n  // }\n}\n\nexport default new Auth_api();","W:\\blog\\src\\components\\Post\\Post.js",[],"W:\\blog\\src\\components\\Auth_hoc\\Auth_hoc.js",[],"W:\\blog\\src\\components\\Writer\\index.js",[],"W:\\blog\\src\\components\\User\\index.js",[],"W:\\blog\\src\\components\\User\\User.js",[],"W:\\blog\\src\\components\\Writer\\Writer.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":33,"column":5,"nodeType":"133","messageId":"134","endLine":33,"endColumn":16},{"ruleId":"135","severity":2,"message":"136","line":36,"column":37,"nodeType":"137","messageId":"138","endLine":36,"endColumn":42},{"ruleId":"135","severity":2,"message":"139","line":37,"column":37,"nodeType":"137","messageId":"138","endLine":37,"endColumn":45},{"ruleId":"135","severity":2,"message":"140","line":38,"column":37,"nodeType":"137","messageId":"138","endLine":38,"endColumn":45},{"ruleId":"135","severity":2,"message":"141","line":39,"column":43,"nodeType":"137","messageId":"138","endLine":39,"endColumn":49},{"ruleId":"131","severity":1,"message":"132","line":24,"column":5,"nodeType":"133","messageId":"134","endLine":24,"endColumn":16},"lines-around-directive",["142"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","no-undef","'email' is not defined.","Identifier","undef","'username' is not defined.","'password' is not defined.","'avatar' is not defined.","padding-line-between-statements"]